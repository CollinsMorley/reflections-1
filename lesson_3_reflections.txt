When would you want to use a remote repository rather than keeping all your work
local?

    You would want to use a remote repository when you are working on a big project that involves other users. If you are doing a project
	by yourself, then I would keep it all on my local machine.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

It's better to pull changes manually cause you always want to know what's on your machine and what's on GitHub. If Git stayed up to date
with GitHub, then some change maybe made that the user doesn't know about which can lead to bad things.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks is a command that runs only on GitHub itself. It acts like a clone command in the Git. I would use fork if I had to copy someones
	code to view before running it on my local machine.
	Clones is a command that you use on Git. Basically it copies a repository from GitHub that you specified. I would use clone if I was
	interested in viewing someone's project for fun.
	Branches are certain commits that are not part of the master branch. Branches are used when a user wants to do a certain change,
	but doesn't want to add tedious commits. I would use branches if I was making a change I wanted to test out before putting it on 
	the master path.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    A benefit of having an up to date copy is when you go offline for awhile and you 
	need to bring your laptop to do work on the local side. You would want to work on
	the most up to date remote stored locally before going offline.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    If we didn't have Git or GitHub, then collaboration would be really hard. You would always
	have to email zip files to your partners and making sure they have the right up to date version.
	Git and GitHub make collaboration a lot easier for programmers to share code for big projects.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would want to make changes in a separate branch if we were to test something that
	could potentially introduce a new bug into the master branch. If we were dealing with a small
	change, then we could make the change on the master branch.